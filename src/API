// Create the main navi table
sol::table navi = lua.create_named_table("navi");


// HOOK API

sol::table hook = navi.create_named("hook");

hook.set_function("add", [this](const std::string &hook_name,
            const sol::function &func) noexcept {
        m_hook_manager->addHook(hook_name, func);
        });

hook.set_function("trigger", [this](const std::string &hook_name) noexcept {
        m_hook_manager->triggerHook(hook_name);
        });

hook.set_function("clear_functions", [this](const std::string &hook_name,
            const sol::function &func) noexcept {
        m_hook_manager->clearHookFunctions(hook_name);
        });

// BOOKMARK API
sol::table bookmark = navi.create_named("bookmark");

bookmark.set_function("add", [this](const std::string &bookmark_name,
            const std::string &file_path,
            const bool &highlight) noexcept {
        m_bookmark_manager->addBookmark(QString::fromStdString(bookmark_name),
                QString::fromStdString(file_path),
                highlight);
        });

bookmark.set_function("remove", [this](const std::string &bookmark_name) noexcept {
        m_bookmark_manager->removeBookmark(QString::fromStdString(bookmark_name));
        });

// API API
sol::table api = navi.create_named("api");

api.set_function("cd", [this](const std::string &dir) noexcept {
        m_file_panel->setCurrentDir(QString::fromStdString(dir), true);
        });

api.set_function("register_function", [this](const std::string &name,
            const sol::function &func) noexcept {
        Lua__register_lua_function(name, func);
        });

api.set_function("unregister_function", [this](const std::string &name) noexcept {
        Lua__unregister_lua_function(name);
        });

api.set_function("list_registered_functions", [this]() noexcept {
        return Lua__registered_lua_functions();
        });

api.set_function("count", [this]() noexcept {
        return m_file_panel->ItemCount();
        });

api.set_function("create_dir", [this](const std::vector<std::string> &paths) noexcept {
        this->Lua__CreateFolders(paths);
        });

api.set_function("create_file", [this](const std::vector<std::string> &fileNames) noexcept {
        QStringList files = utils::stringListFromVector(fileNames);
        m_file_panel->NewFile(files);
        });

api.set_function("is_file", [this](const std::string &path) noexcept {
        return QFileInfo(QString::fromStdString(path)).isFile();
        });

api.set_function("is_dir", [this](const std::string &path) noexcept {
        return QFileInfo(QString::fromStdString(path)).isDir();
        });

api.set_function("next_item", [this]() noexcept {
        m_file_panel->NextItem();
        });

api.set_function("prev_item", [this]() noexcept { m_file_panel->PrevItem(); });

api.set_function("first_item", [this]() noexcept {
        m_file_panel->GotoFirstItem();
        });

api.set_function("last_item", [this]() noexcept { m_file_panel->GotoLastItem(); });

api.set_function("middle_item", [this]() noexcept {
        m_file_panel->GotoMiddleItem();
        });

api.set_function("parent_dir", [this]() noexcept {
        m_file_panel->UpDirectory();
        });

api.set_function("prev_dir", [this]() noexcept {
        m_file_panel->PreviousDirectory();
        });

api.set_function("select_item", [this]() noexcept { m_file_panel->SelectItem(); });

api.set_function("item_name", [this]() noexcept {
        return m_file_panel->getCurrentItem().toStdString();
        });

api.set_function("item_property", [this]() noexcept {
        return m_file_panel->getItemProperty();
        });

api.set_function("pwd", [this]() noexcept {
        return m_file_panel->getCurrentDir().toStdString();
        });

api.set_function("filter", [this](const QString &filter) noexcept {
        m_file_panel->Filters(filter);
        });

api.set_function("reset_filter", [this]() noexcept {
        m_file_panel->ResetFilter();
        });

api.set_function("mark", [this]() noexcept { return m_file_panel->MarkItem(); });

api.set_function("mark_inverse", [this]() noexcept {
        m_file_panel->MarkInverse();
        });

api.set_function("mark_all", [this]() noexcept {
        return m_file_panel->MarkAllItems();
        });

api.set_function("mark_dwim", [this]() noexcept {
        return m_file_panel->MarkDWIM();
        });

api.set_function("unmark", [this]() noexcept { m_file_panel->UnmarkItem(); });

api.set_function("unmark_dwim", [this]() noexcept { m_file_panel->UnmarkDWIM(); });

api.set_function("toggle_mark", [this]() noexcept {
        m_file_panel->ToggleMarkItem();
        });

api.set_function("toggle_mark_dwim", [this]() noexcept {
        m_file_panel->ToggleMarkDWIM();
        });

api.set_function("rename", [this]() noexcept { m_file_panel->RenameItem(); });

api.set_function("rename_dwim", [this]() noexcept { m_file_panel->RenameDWIM(); });

api.set_function("delete", [this]() noexcept { m_file_panel->DeleteItem(); });

api.set_function("delete_dwim", [this]() noexcept { m_file_panel->DeleteDWIM(); });

api.set_function("chmod", [this]() noexcept { m_file_panel->ChmodItem(); });

api.set_function("spawn", [this](const std::string &command,
            const std::vector<std::string> args) noexcept {
        QStringList arglist;
        for (const auto &str : args)
        arglist.push_back(QString::fromStdString(str));

        SpawnProcess(QString::fromStdString(command), arglist);
        });

api.set_function("has_selection", [this]() noexcept {
        return m_file_panel->has_selection();
        });

api.set_function("local_marks", [this]() noexcept {
        return utils::convertToStdVector(
                m_file_panel->model()->getMarkedFilesLocal());
        });

api.set_function("local_marks_count", [this]() noexcept {
        return m_file_panel->model()->getMarkedFilesCountLocal();
        });

api.set_function("global_marks", [this]() noexcept {
        return utils::convertToStdVector(m_file_panel->model()->getMarkedFiles());
        });

api.set_function("global_marks_count", [this]() noexcept {
        return m_file_panel->model()->getMarkedFilesCount();
        });

api.set_function("has_marks_global", [this]() noexcept {
        return m_file_panel->model()->hasMarks();
        });

api.set_function("has_marks_local", [this]() noexcept {
        return m_file_panel->model()->hasMarksLocal();
        });

api.set_function("cut", [this]() noexcept { m_file_panel->CutItem(); });

api.set_function("cut_dwim", [this]() noexcept { m_file_panel->CutDWIM(); });

api.set_function("copy_dwim", [this]() noexcept { m_file_panel->CopyDWIM(); });

api.set_function("copy", [this]() noexcept { return m_file_panel->CopyItem(); });

api.set_function("trash", [this]() noexcept { m_file_panel->TrashItem(); });

api.set_function("trash_dwim", [this]() noexcept { m_file_panel->TrashDWIM(); });

api.set_function("search", [this](const std::string &searchTerm) noexcept {
        m_file_panel->Search(QString::fromStdString(searchTerm));
        });

api.set_function("search_next", [this]() noexcept { m_file_panel->SearchNext(); });

api.set_function("search_prev", [this]() noexcept { m_file_panel->SearchPrev(); });

api.set_function("sort_name", [this]() noexcept {});

api.set_function("highlight", [this](const std::string &item_path) noexcept {
        m_file_panel->HighlightItem(QString::fromStdString(item_path));
        });

api.set_function("mount_drive", [this](const std::string &path) noexcept {
        MountDrive(QString::fromStdString(path));
        });

api.set_function("unmount_drive", [this](const std::string &path) noexcept {
        UnmountDrive(QString::fromStdString(path));
        });

api.set_function("list_runtime_paths", [this]() noexcept {
        return Lua__list_runtime_paths();
        });


sol::table keymap = navi.create_named("keymap");

keymap.set_function("set", sol::overload(
            [this](const sol::table &table) noexcept {
            Lua__keymap_set(table);
            },

            [this](const std::string &key,
                const std::string &command,
                const std::string &desc) noexcept {
            Lua__keymap_set(key, command, desc);
            }));

// UI API

sol::table ui = navi.create_named("ui");

sol::table menubar = ui.create_named("menubar");

menubar.set_function("toggle", [this](const bool &state) noexcept {
        ToggleMenuBar(state);
        });

menubar.set_function("toggle", [this]() noexcept {
        ToggleMenuBar();
        });

menubar.set_function("add_menu", [this](const sol::table &menu_item) noexcept {
        Lua__AddMenu(menu_item);
        });

sol::table statusbar = ui.create_named("statusbar");

statusbar.set_function("toggle", [this](const bool &state) noexcept {
        ToggleStatusBar(state);
        });

statusbar.set_function("toggle", [this]() noexcept { ToggleStatusBar(); });

statusbar.set_function("add_module", [this](const Statusbar::Module &module) noexcept {
        m_statusbar->Lua__AddModule(module);
        });

statusbar.set_function("set_modules", [this](const sol::table &table) noexcept {
        m_statusbar->Lua__SetModules(table);
        });

statusbar.set_function("set_modules", [this](const sol::table &table) noexcept {
        m_statusbar->Lua__SetModules(table);
        });

statusbar.set_function("insert_module", [this](const Statusbar::Module &module, const uint32_t &index) noexcept {
        m_statusbar->Lua__InsertModule(module, index);
        });

statusbar.set_function("create_module", [this](const std::string &name, const sol::table &table) noexcept {
        return m_statusbar->Lua__CreateModule(name, table);
        });

statusbar.set_function("set_module_text", [this](const std::string &name, const sol::object &obj) noexcept {
        if (obj.is<std::string>()) {
        m_statusbar->Lua__UpdateModuleText(name, obj.as<std::string>());
        } else if (obj.is<sol::function>()) {
        auto func = obj.as<sol::function>();
        sol::object value = func();
        if (value.is<std::string>()) {
        m_statusbar->Lua__UpdateModuleText(name, value.as<std::string>());
        }
        }
        });

lua["navi"]["ui"]["pathbar"] = [this](const bool &state) noexcept {
    TogglePathWidget(state);
};

lua["navi"]["ui"]["pathbar"] = [this]() noexcept { TogglePathWidget(); };

lua["navi"]["ui"]["preview_panel"] = [this](const bool &state) noexcept {
    TogglePreviewPanel(state);
};

lua["navi"]["ui"]["preview_panel"] = [this]() noexcept { TogglePreviewPanel(); };

lua["navi"]["ui"]["messages"] = [this]() noexcept { ToggleMessagesBuffer(); };

lua["navi"]["ui"]["messages"] = [this](const bool &state) noexcept {
    ToggleMessagesBuffer(state);
};

lua["navi"]["ui"]["shortcuts"] = [this](const bool &state) noexcept {
    ToggleShortcutsBuffer(state);
};

lua["navi"]["ui"]["shortcuts"] = [this]() noexcept { ToggleShortcutsBuffer(); };

lua["navi"]["ui"]["marks"] = [this](const bool &state) noexcept {
    ToggleMarksBuffer(state);
};

lua["navi"]["ui"]["marks"] = [this]() noexcept { ToggleMarksBuffer(); };

sol::table context_menu = ui.create_named("context_menu");

context_menu.set_function("create", [this](const sol::table &table) noexcept {
        Lua__AddContextMenu(table);
        });

sol::table toolbar = ui.create_named("toolbar");

toolbar.set_function("add_button", [this](const Navi::ToolbarItem &tb_item) noexcept {
        Lua__AddToolbarButton(tb_item);
        });

toolbar.set_function("create_button", [this](const std::string &name, const sol::table &table) noexcept {
        return Lua__CreateToolbarButton(name, table);
        });

toolbar.set_function("set_items", [this](const sol::table &table) noexcept {
        Lua__SetToolbarItems(table);
        });

// IO API
sol::table io = navi.create_named("io");

io.set_function("msg", [this](const std::string &message, const MessageType &type) noexcept {
        m_statusbar->Message(QString::fromStdString(message), type);
        });

lua["navi"]["io"]["msgtype"] =
lua.create_table_with("info", MessageType::INFO, "warn",
        MessageType::WARNING, "error", MessageType::ERROR);

io.set_function("input", [this](const std::string &prompt, const std::string &def_text,
            const std::string &selection_text) noexcept {
        return this->Lua__Input(prompt, def_text, selection_text);
        });

// SHELL API

sol::table shell = navi.create_named("shell");
shell.set_function("execute", [this](const std::string &command) noexcept {
        ShellCommandAsync(QString::fromStdString(command));
        });
